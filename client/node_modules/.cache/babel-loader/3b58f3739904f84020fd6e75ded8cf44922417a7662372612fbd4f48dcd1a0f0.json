{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { useDidUpdate } from './useDidUpdate.js';\n\n/**\r\n * useWhyDidYouUpdate\r\n * @description A hook that can track which value change caused a rerender\r\n * @see {@link https://rooks.vercel.app/docs/useWhyDidYouUpdate}\r\n */\nfunction useWhyDidYouUpdate(componentName, currentProps, enableLogging = true) {\n  const previousProps = useRef({});\n  useDidUpdate(() => {\n    if (previousProps.current && enableLogging) {\n      const combinedKeys = Object.keys(Object.assign(Object.assign({}, previousProps.current), currentProps));\n      const changedProps = {};\n      combinedKeys.forEach(key => {\n        if (!Object.is(previousProps.current[key], currentProps[key])) {\n          changedProps[key] = {\n            from: previousProps.current[key],\n            to: currentProps[key]\n          };\n        }\n      });\n      if (Object.keys(changedProps).length) {\n        console.log(\"[why-did-you-update]\", componentName, changedProps);\n      }\n    }\n  }, [currentProps, componentName, enableLogging]);\n  useEffect(() => {\n    previousProps.current = currentProps;\n  });\n}\nexport { useWhyDidYouUpdate };","map":{"version":3,"names":["useRef","useEffect","useDidUpdate","useWhyDidYouUpdate","componentName","currentProps","enableLogging","previousProps","current","combinedKeys","Object","keys","assign","changedProps","forEach","key","is","from","to","length","console","log"],"sources":["/home/zt62/Desktop/Harshil_Dave/MERN_PRACTICE/client/node_modules/rooks/dist/esm/hooks/useWhyDidYouUpdate.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport { useDidUpdate } from './useDidUpdate.js';\n\n/**\r\n * useWhyDidYouUpdate\r\n * @description A hook that can track which value change caused a rerender\r\n * @see {@link https://rooks.vercel.app/docs/useWhyDidYouUpdate}\r\n */\r\nfunction useWhyDidYouUpdate(componentName, currentProps, enableLogging = true) {\r\n    const previousProps = useRef({});\r\n    useDidUpdate(() => {\r\n        if (previousProps.current && enableLogging) {\r\n            const combinedKeys = Object.keys(Object.assign(Object.assign({}, previousProps.current), currentProps));\r\n            const changedProps = {};\r\n            combinedKeys.forEach((key) => {\r\n                if (!Object.is(previousProps.current[key], currentProps[key])) {\r\n                    changedProps[key] = {\r\n                        from: previousProps.current[key],\r\n                        to: currentProps[key],\r\n                    };\r\n                }\r\n            });\r\n            if (Object.keys(changedProps).length) {\r\n                console.log(\"[why-did-you-update]\", componentName, changedProps);\r\n            }\r\n        }\r\n    }, [currentProps, componentName, enableLogging]);\r\n    useEffect(() => {\r\n        previousProps.current = currentProps;\r\n    });\r\n}\n\nexport { useWhyDidYouUpdate };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,aAAa,EAAEC,YAAY,EAAEC,aAAa,GAAG,IAAI,EAAE;EAC3E,MAAMC,aAAa,GAAGP,MAAM,CAAC,CAAC,CAAC,CAAC;EAChCE,YAAY,CAAC,MAAM;IACf,IAAIK,aAAa,CAACC,OAAO,IAAIF,aAAa,EAAE;MACxC,MAAMG,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACD,MAAM,CAACE,MAAM,CAACF,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEL,aAAa,CAACC,OAAO,CAAC,EAAEH,YAAY,CAAC,CAAC;MACvG,MAAMQ,YAAY,GAAG,CAAC,CAAC;MACvBJ,YAAY,CAACK,OAAO,CAAEC,GAAG,IAAK;QAC1B,IAAI,CAACL,MAAM,CAACM,EAAE,CAACT,aAAa,CAACC,OAAO,CAACO,GAAG,CAAC,EAAEV,YAAY,CAACU,GAAG,CAAC,CAAC,EAAE;UAC3DF,YAAY,CAACE,GAAG,CAAC,GAAG;YAChBE,IAAI,EAAEV,aAAa,CAACC,OAAO,CAACO,GAAG,CAAC;YAChCG,EAAE,EAAEb,YAAY,CAACU,GAAG;UACxB,CAAC;QACL;MACJ,CAAC,CAAC;MACF,IAAIL,MAAM,CAACC,IAAI,CAACE,YAAY,CAAC,CAACM,MAAM,EAAE;QAClCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEjB,aAAa,EAAES,YAAY,CAAC;MACpE;IACJ;EACJ,CAAC,EAAE,CAACR,YAAY,EAAED,aAAa,EAAEE,aAAa,CAAC,CAAC;EAChDL,SAAS,CAAC,MAAM;IACZM,aAAa,CAACC,OAAO,GAAGH,YAAY;EACxC,CAAC,CAAC;AACN;AAEA,SAASF,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}